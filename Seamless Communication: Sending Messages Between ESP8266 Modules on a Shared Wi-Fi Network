SERVER CODE: 
#include <ESP8266WiFi.h>

const char* ssid = "your_SSID"; // Replace with your Wi-Fi SSID
const char* password = "your_PASSWORD"; // Replace with your Wi-Fi password

WiFiServer server(80); // Server on port 80

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  server.begin(); // Start the server
  Serial.println("Server started");
}

void loop() {
  WiFiClient client = server.available(); // Check for incoming clients

  if (client) {
    Serial.println("Client connected");
    while (client.connected()) {
      if (client.available()) {
        String message = client.readStringUntil('\n'); // Read incoming message
        Serial.print("Message received: ");
        Serial.println(message);

        // Respond to the client
        client.println("Hello from Server");
      }
    }]



Client code : 
#include <ESP8266WiFi.h>

const char* ssid = "your_SSID"; // Replace with your Wi-Fi SSID
const char* password = "your_PASSWORD"; // Replace with your Wi-Fi password

const char* serverIP = "192.168.1.100"; // Replace with the server ESP8266's IP address
const uint16_t serverPort = 80;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
}

void loop() {
  WiFiClient client;

  if (client.connect(serverIP, serverPort)) {
    Serial.println("Connected to server");

    // Send a "hi" message to the server
    client.println("hi");
    Serial.println("Message sent: hi");

    while (client.connected()) {
      if (client.available()) {
        String response = client.readStringUntil('\n'); // Read server's response
        Serial.print("Response received: ");
        Serial.println(response);
      }
    }

    client.stop();
    Serial.println("Disconnected from server");
  } else {
    Serial.println("Connection to server failed");
  }

  delay(5000); // Wait 5 seconds before sending the next message
}

    client.stop();
    Serial.println("Client disconnected");
  }
}
